{"version":3,"sources":["../../src/validation/userValidation.js"],"names":["Joi","require","registerValidation","user","schema","object","username","string","required","alphanum","min","max","empty","messages","email","minDomainSegments","tlds","allow","password","pattern","RegExp","options","abortEarly","validate","loginValidation","module","exports"],"mappings":";;AAAA,IAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,IAAI,EAAI;AACjC,MAAMC,MAAM,GAAGJ,GAAG,CAACK,MAAJ,CAAW;AACxBC,IAAAA,QAAQ,EAAEN,GAAG,CAACO,MAAJ,GAAaC,QAAb,GAAwBC,QAAxB,GAAmCC,GAAnC,CAAuC,CAAvC,EACPC,GADO,CACH,GADG,EAEPC,KAFO,GAGPC,QAHO,CAGE;AACR,sBAAgB,6BADR;AAER,yBAAmB,2DAFX;AAGR,sBAAgB,mCAHR;AAIR,oBAAc;AAJN,KAHF,CADc;AAUxBC,IAAAA,KAAK,EAAEd,GAAG,CAACO,MAAJ,GAAaC,QAAb,GAAwBM,KAAxB,CAA8B;AAAEC,MAAAA,iBAAiB,EAAE,CAArB;AAAwBC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,IAAf,EAAqB,IAArB;AAAT;AAA9B,KAA9B,EAAqGP,GAArG,CAAyG,CAAzG,EACJC,GADI,CACA,GADA,EAEJC,KAFI,GAGJC,QAHI,CAGK;AACR,sBAAgB,0BADR;AAER,sBAAgB,uCAFR;AAGR,sBAAgB;AAHR,KAHL,CAViB;AAkBxBK,IAAAA,QAAQ,EAAElB,GAAG,CAACO,MAAJ,GAAaC,QAAb,GAAwBI,KAAxB,GAAgCF,GAAhC,CAAoC,CAApC,EACPC,GADO,CACH,IADG,EAEPQ,OAFO,CAEC,IAAIC,MAAJ,CAAW,qBAAX,CAFD,EAGPP,QAHO,CAGE;AACR,sBAAgB,6BADR;AAER,6BAAuB,qDAFf;AAGR,sBAAgB,0CAHR;AAIR,oBAAc;AAJN,KAHF;AAlBc,GAAX,EA2BZQ,OA3BY,CA2BJ;AAAEC,IAAAA,UAAU,EAAE;AAAd,GA3BI,CAAf;AA4BA,SAAOlB,MAAM,CAACmB,QAAP,CAAgBpB,IAAhB,CAAP;AACD,CA9BD;;AAgCA,IAAMqB,eAAe,GAAG,SAAlBA,eAAkB,CAAArB,IAAI,EAAI;AAC9B,MAAMC,MAAM,GAAGJ,GAAG,CAACK,MAAJ,CAAW;AACxBS,IAAAA,KAAK,EAAEd,GAAG,CAACO,MAAJ,GAAaC,QAAb,GAAwBM,KAAxB,CAA8B;AAAEC,MAAAA,iBAAiB,EAAE,CAArB;AAAwBC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,IAAf,EAAqB,IAArB,EAA2B,IAA3B;AAAT;AAA9B,KAA9B,EAA2GP,GAA3G,CAA+G,CAA/G,EACJC,GADI,CACA,GADA,EAEJC,KAFI,GAGJC,QAHI,CAGK;AACR,sBAAgB,0BADR;AAER,sBAAgB,4BAFR;AAGR,sBAAgB;AAHR,KAHL,CADiB;AASxBK,IAAAA,QAAQ,EAAElB,GAAG,CAACO,MAAJ,GAAaC,QAAb,GAAwBE,GAAxB,CAA4B,CAA5B,EAA+BC,GAA/B,CAAmC,IAAnC,EACPQ,OADO,CACC,IAAIC,MAAJ,CAAW,qBAAX,CADD,EAEPP,QAFO,CAEE;AACR,6BAAuB,qDADf;AAER,sBAAgB,0CAFR;AAGR,oBAAc;AAHN,KAFF;AATc,GAAX,CAAf;AAiBA,SAAOT,MAAM,CAACmB,QAAP,CAAgBpB,IAAhB,CAAP;AACD,CAnBD;;AAsBAsB,MAAM,CAACC,OAAP,CAAexB,kBAAf,GAAoCA,kBAApC;AACAuB,MAAM,CAACC,OAAP,CAAeF,eAAf,GAAiCA,eAAjC","sourcesContent":["const Joi = require(\"joi\");\r\n\r\nconst registerValidation = user => {\r\n  const schema = Joi.object({\r\n    username: Joi.string().required().alphanum().min(3)\r\n      .max(255)\r\n      .empty()\r\n      .messages({\r\n        \"any.required\": \"Sorry, username is required\",\r\n        \"string.alphanum\": \"Sorry, Username must contain only alphanumeric characters\",\r\n        \"string.empty\": \"username cannot be an empty field\",\r\n        \"string.min\": \"username should have a minimum length of 3 and a maximum length of 255\"\r\n      }),\r\n    email: Joi.string().required().email({ minDomainSegments: 2, tlds: { allow: [\"com\", \"net\", \"uk\", \"co\"] } }).min(5)\r\n      .max(100)\r\n      .empty()\r\n      .messages({\r\n        \"any.required\": \"Sorry, email is required\",\r\n        \"string.empty\": \"Sorry, Email cannot be an empty field\",\r\n        \"string.email\": \"Please enter a valid email\",\r\n      }),\r\n    password: Joi.string().required().empty().min(5)\r\n      .max(1024)\r\n      .pattern(new RegExp(\"^[a-zA-Z0-9]{3,30}$\"))\r\n      .messages({\r\n        \"any.required\": \"Sorry, password is required\",\r\n        \"string.pattern.base\": \"password must contain only alphanumeric characters.\",\r\n        \"string.empty\": \"Sorry, password cannot be an empty field\",\r\n        \"string.min\": \"password should have a minimum length of 5\"\r\n      }),\r\n  }).options({ abortEarly: false });\r\n  return schema.validate(user);\r\n};\r\n\r\nconst loginValidation = user => {\r\n  const schema = Joi.object({\r\n    email: Joi.string().required().email({ minDomainSegments: 2, tlds: { allow: [\"com\", \"net\", \"uk\", \"co\", \"io\"] } }).min(5)\r\n      .max(100)\r\n      .empty()\r\n      .messages({\r\n        \"any.required\": \"Sorry, email is required\",\r\n        \"string.email\": \"Please enter a valid email\",\r\n        \"string.empty\": \"Sorry, Email cannot be an empty field\",\r\n      }),\r\n    password: Joi.string().required().min(5).max(1024)\r\n      .pattern(new RegExp(\"^[a-zA-Z0-9]{3,30}$\"))\r\n      .messages({\r\n        \"string.pattern.base\": \"Password must contain only alphanumeric characters.\",\r\n        \"string.empty\": \"Sorry, password cannot be an empty field\",\r\n        \"string.min\": \"Password should have a minimum length of 5\"\r\n      }),\r\n  });\r\n  return schema.validate(user);\r\n};\r\n\r\n\r\nmodule.exports.registerValidation = registerValidation;\r\nmodule.exports.loginValidation = loginValidation;"],"file":"userValidation.js"}
{"version":3,"sources":["../../src/controllers/User.js"],"names":["User","require","bcrypt","jwt","loginValidation","registerValidation","userController","req","res","body","error","status","send","details","message","Email","email","toLowerCase","Username","username","findOne","emailExist","hash","password","hashedPassword","user","save","savedUser","json","compare","validpass","token","sign","_id","process","env","TOKEN_SECRET","header","find","users","name","query","deleteOne","deleteduser","updateOne","$set","updateduser","module","exports"],"mappings":"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","sourcesContent":["const User = require(\"../models/User\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst jwt = require(\"jsonwebtoken\");\r\n// const jwtHelper = (\"../utilities/jwt\");\r\nconst { loginValidation, registerValidation} = require(\"../validation/userValidation\");\r\n\r\n\r\n\r\nclass userController{\r\n    //REGISTER A USER TO THE DATABASE\r\n    static async createUser(req, res) {\r\n        \r\n        const {error} = registerValidation(req.body);\r\n        if (error) return res.status(400).send(error.details[0].message);\r\n        \r\n        const Email = (req.body.email).toLowerCase();\r\n        const Username = (req.body.username).toLowerCase();\r\n        const emailExist = await User.findOne({email: Email});\r\n        if (emailExist) return res.status(409).send(\"Email already exist on the database\");\r\n         \r\n        // const salt = await bcrypt.gentSalt(10);\r\n        const hashedPassword = await bcrypt.hash(req.body.password, 10)\r\n        \r\n        const user = new User({username: Username,email: Email,password: hashedPassword});\r\n        try{\r\n        const savedUser = await user.save();\r\n\r\n        return res.status(201).json({ status: 201, message: \"A user has been successfully registered you can Log in.\" });\r\n        } catch (err)  {\r\n        res.status(500).json({ status: 500, error: \"Server Error\" });\r\n    }}\r\n\r\n\r\n    //SIGN IN A USER TO THE DATABASE\r\n    static async loginUser(req, res) {\r\n        try{\r\n        const {error} = loginValidation(req.body);\r\n        if (error) return res.status(400).send(error.details[0].message);\r\n        const { email, password } = req.body;\r\n        const user = await User.findOne({email});\r\n        if (!user) return res.status(409).send(\"Email does not exist on the database\");\r\n        \r\n        const validpass = await bcrypt.compare(password, user.password);\r\n        if (!validpass) return res.status(404).json({ status: 400, error: \"Password is not correct!.\" });\r\n        \r\n        const token = jwt.sign({ _id: user._id }, process.env.TOKEN_SECRET);\r\n        res.header(\"auth-token\", token);\r\n        return res.status(200).json({ status:200, message: \"User Logged in!\", token});\r\n        } catch (err)  {\r\n        res.status(500).json({ status: 500, error: \"Server Error\" });\r\n    }}\r\n\r\n    // GET BACK ALL THE users\r\n    static async getUsers(req, res) {\r\n        try{\r\n            const users = await User.find();\r\n            return res.status(200).json({ status: 200, message: \"successfully retrieved all users\", users, });\r\n        } catch (err)  {\r\n        res.status(500).json({ status: 500, error: \"Server Error\" });\r\n    }}\r\n\r\n    //get a specific user\r\n    static async getUser(req, res) {\r\n        const { name } = req.query;\r\n        try{\r\n            const user = await User.findOne({username: name});\r\n            return res.status(200).json({ status: 200, message: `successfully retrieved ${user.name} details`, user, });\r\n        } catch (err)  {\r\n        return res.status(404).send({status: 404,error: `${name} does not exists in the database`,});\r\n    }}\r\n\r\n    // DELETE A SPECIFIC USER FROM THE DATABASE\r\n    static async deleteUser(req, res) {\r\n        const { name } = req.query;\r\n        try{\r\n            const deleteduser = await User.deleteOne({username: name});\r\n            return res.status(200).json({ status: 200, message: `successfully Deleted ${deleteduser.name}` });\r\n        } catch (err)  {\r\n        return res.status(404).send({status: 404,error: `'${name}' does not exists in the database`,});\r\n    }}\r\n\r\n    static async updateUser(req, res) {\r\n        const { name } = req.query;\r\n        try{\r\n            const updateduser = await User.updateOne(\r\n                {name}, \r\n                {$set: {username: req.body.username}\r\n                });\r\n            return res.status(200).json({ status: 200, message: \"successfully Updated user details\"});\r\n            \r\n        } catch (err)  {\r\n        return res.status(404).send({status: 404,error: \"User does not exists in the database\",});\r\n    }\r\n    }\r\n}\r\n\r\nmodule.exports = userController;"],"file":"User.js"}
{"version":3,"sources":["../../src/controllers/Product.js"],"names":["Product","require","productValidation","productController","req","res","body","error","status","send","details","message","product","name","categoryName","price","save","savedProduct","json","find","query","findOne","deleteOne","updateOne","$set","module","exports"],"mappings":"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","sourcesContent":["const Product = require(\"../models/Product\");\r\nconst { productValidation } = require(\"../validation/productValidation\");\r\n\r\n\r\nclass productController {\r\n    //ADDS A PRODUCT TO THE DATABASE\r\n    static async addProduct(req, res) {\r\n            const {error} = productValidation(req.body);\r\n            if (error) return res.status(400).send(error.details[0].message);\r\n            const product = new Product({name: req.body.name,categoryName: req.body.categoryName,price: req.body.price})\r\n            try{\r\n            const savedProduct = await product.save()\r\n            return res.status(201).json({ status: 201, message: \"A product has been added.\", savedProduct, });\r\n        } catch (err)  {\r\n        res.status(500).json({ status: 500, error: \"Server Error\" });\r\n    }}\r\n\r\n    // GET BACK ALL THE PRODUCTS ON THE DATABASE\r\n    static async getProducts(req, res) {\r\n        try{\r\n            const product = await Product.find();\r\n            return res.status(200).json({ status: 200, message: `successfully retrieved products}`, product, });\r\n        } catch (err)  {\r\n        res.status(500).json({ status: 500, error: \"Server Error\" });\r\n    }}\r\n\r\n    //get a specific product\r\n    static async getProduct(req, res) {\r\n        const { name } = req.query;\r\n        try{\r\n            const product = await Product.findOne({name: name});\r\n            return res.status(200).json({ status: 200, message: `successfully retrieved ${product.name}`, product, });\r\n        } catch (err)  {\r\n        return res.status(404).send({status: 404,error: `'${name}' does not exists in the database`});\r\n    }}\r\n\r\n    //DELETE A SPECIFIC PRODUCT FROM THE DATABASE\r\n    static async deleteProduct(req, res) {\r\n        const { name } = req.query;\r\n        try{\r\n            const product = await Product.deleteOne({name: name});\r\n            return res.status(200).json({ status: 200, message: `successfully Deleted ${name} from database` });\r\n        } catch (err)  {\r\n        return res.status(404).send({status: 404,error: `'${name}' does not exists in the database`,});\r\n    }}\r\n\r\n    //UPDATE A SPECIFIC PRODUCT ON THE DATABASE\r\n    static async updateProduct(req, res) {\r\n        const {name } = req.query;\r\n        try{\r\n            const product = await Product.updateOne(\r\n                {name}, \r\n                {$set: {name: req.body.name, categoryName: req.body.categoryName, price: req.body.price}\r\n                });\r\n            return res.status(200).json({ status: 200, message: \"successfully Updated product\"});\r\n            \r\n        } catch (err)  {\r\n        return res.status(404).send({ status: 404, error: \"sorry Product does not exist in the database\" });\r\n    }}\r\n}\r\n\r\nmodule.exports = productController;"],"file":"Product.js"}
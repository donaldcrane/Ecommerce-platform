{"version":3,"sources":["../../src/controllers/Categories.js"],"names":["Category","require","categoryValidation","categoryController","req","res","body","error","status","send","details","message","category","name","save","savedCategory","json","find","categories","query","findOne","deleteOne","updateOne","$set","module","exports"],"mappings":"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","sourcesContent":["const Category = require(\"../models/Category\");\r\nconst { categoryValidation} = require(\"../validation/CategoryValidation\");\r\n\r\n\r\nclass categoryController {\r\n    //ADDS A CATEGORY TO THE DATABASE\r\n    static async addCategory(req, res) {\r\n        try{\r\n            const {error} = categoryValidation(req.body);\r\n            if (error) return res.status(400).send(error.details[0].message);\r\n            const category = new Category({ name: req.body.name,})\r\n            const savedCategory = await category.save()\r\n            return res.status(201).json({ status: 201, message: \"A product has been added.\", savedCategory, });\r\n        } catch (err)  {\r\n        res.status(500).json({ status: 500, error: \"Server Error\" });\r\n    }\r\n}\r\n    // GET BACK ALL THE CATEGORY\r\n    static async getCategories(req, res) {\r\n        try{\r\n            const categories = await Category.find();\r\n            return res.status(200).json({ status: 200, message: `successfully retrieved all categories}`, categories, });\r\n        } catch (err)  {\r\n        res.status(500).json({ status: 500, error: \"Server Error\" });\r\n    }\r\n    }\r\n\r\n    //get a specific category\r\n    static async getCategory(req, res) {\r\n        const { name } = req.query;\r\n        try{\r\n            const category = await Category.findOne({name: name});\r\n            return res.status(200).json({ status: 200, message: `successfully retrieved ${name}`, category, });\r\n        } catch (err)  {\r\n        return res.status(404).send({status: 404,error: `'${name}' does not exists in the database`,});\r\n    }\r\n    }\r\n\r\n    // DELETE A SPECIFIC CATEGORY ON THE DATABASE\r\n    static async deleteCategory(req, res) {\r\n        const { name } = req.query;\r\n        try{\r\n            const category = await Category.deleteOne({name: name});\r\n            return res.status(200).json({ status: 200, message: \"successfully Deleted category\" });\r\n        } catch (err)  {\r\n        return res.status(404).send({status: 404,error: `'${name}' does not exists in the database`,});\r\n    }\r\n    }\r\n\r\n    //UPDATE A SPECIFIC CATEGORY ON THE DATABASE\r\n    static async updateCategory(req, res) {\r\n        const { name } = req.query;\r\n        try{\r\n            const category = await Category.updateOne({name}, \r\n                {$set: {name: req.body.name}});\r\n            return res.status(200).json({ status: 200, message: `successfully Updated category`});\r\n            \r\n        } catch (err)  {\r\n        return res.status(404).send({status: 404,error: \"Category does not exists in the database\",});\r\n    }\r\n    }\r\n}\r\nmodule.exports = categoryController;"],"file":"Categories.js"}